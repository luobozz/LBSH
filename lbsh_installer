#!/bin/bash
#命令安装器
SCRIPT_VERSION="1.0.0"
SCRIPT_NAME="lbsh_installer"
LBSH_HOME="$HOME/.lbsh"
# TODO change to independent configuration
# LBSH_HOME_CONFIG="$HOME/.lbsh"
# $LBSH_HOME/config print
# $LBSH_HOME/lib print
# $LBSH_HOME/cache print
# $LBSH_HOME/log print

INSTALL_SUPPORT_ARR=("lssh","tester")
INSTALL_TO_BIN_HOME="./__install_test/bin"

# INSTALL_LSSH_HOME="./lssh"
# INSTALL_LSSH_CONFIG_HOME="$LBSH_HOME/"
INSTALL_LSSH_SHELL="lssh"

# 消息输出统一
function msg() {
    if [ "$1" == "log" ]; then
        if [ "$2" == "error" ]; then
            echo -e "[${SCRIPT_NAME}] $(date '+%Y-%m-%d %H:%M:%S') \e[31mERROR\e[0m: $3" 1>&2
        else
            echo "[${SCRIPT_NAME}] $(date '+%Y-%m-%d %H:%M:%S')  INFO: $2"
        fi
    else
        if [ "$1" == "error" ]; then
            echo -e "\e[31mERROR:\e[0m $2"
        else
            echo "$*"
        fi
    fi
}

function isContains() {
    narr=($1)
    [[ ${narr[@]/$2/} == ${narr[@]} ]]
    echo $?
}

function mkIfNotExistDir() {
    if [ $1 != "" ]; then
        if [ ! -d "$1" ]; then
            if [ "$2" == "print" ]; then
                msg "$1 is not exist,creating now."
            fi
            mkdir $1
        else
            if [ "$2" == "print" ]; then
                msg "$1 is already exist."
            fi
        fi
    fi
}

function lbshHomeCheck(){
    msg "check for lbshHome($LBSH_HOME)"
    mkIfNotExistDir $LBSH_HOME print
    mkIfNotExistDir $LBSH_HOME/config print
    mkIfNotExistDir $LBSH_HOME/lib print
    mkIfNotExistDir $LBSH_HOME/cache print
    mkIfNotExistDir $LBSH_HOME/log print
}

function installerForLssh() {
    lbshHomeCheck
    msg "lssh is being installed."
    cp $INSTALL_LSSH_HOME/$INSTALL_LSSH_SHELL $INSTALL_TO_BIN_HOME/$INSTALL_LSSH_SHELL
    msg "lssh is successfully installed()."
}

if [ "$1" == "" ] || [ "$1" == "-h" ]; then
    msg "   Usage: $0 [options] [command]"
    msg " "
    msg "   Commands: "
    msg "          i,install        install [$INSTALL_SUPPORT_ARR] for your system"
    msg "          u,unstall        unstall"
    msg " "
    msg "   Options: "
    msg "          <default>,-h     Output usage information"
    msg "          -v               Verbose mode"
elif [ "$1" == "i" ]; then
    if [ "$2" == "" ]; then
        msg "Unable to install empty, plase try to install [$INSTALL_SUPPORT_ARR]."
    elif [ "$2" == "lssh" ]; then
        installerForLssh
    else
        msg "$2 is not supported for installation, plase try to install [$INSTALL_SUPPORT_ARR]."
    fi
elif [ "$1" == "-v" ]; then
    msg "${SCRIPT_NAME} version: v${SCRIPT_VERSION}."
else
    msg "$1 is not supported by ${SCRIPT_NAME}."
fi
