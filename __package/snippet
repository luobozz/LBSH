#/bin/bash
function msg() {
    if [ "$1" == "log" ]; then
        if [ "$2" == "error" ]; then
            echo -e "[${SCRIPT_NAME}] $(date '+%Y-%m-%d %H:%M:%S') \e[31mERROR\e[0m: $3" 1>&2
        else
            echo "[${SCRIPT_NAME}] $(date '+%Y-%m-%d %H:%M:%S')  INFO: $2"
        fi
    else
        if [ "$1" == "error" ]; then
            echo -e "\e[31mERROR:\e[0m $2"
        else
            echo "$*"
        fi
    fi
}

# 判断数组内是否存在 0/F 1/T
# arr=(1 2 3 4)
# target1=4
# echo `isContains "${arr[*]}" $target1`
# a=$(isContains "${arr[*]}" $target1)
# echo ${a}
function isContains() {
    narr=($1)
    [[ ${narr[@]/$2/} == ${narr[@]} ]]
    echo $?
}

# 判断是否运行
function isExistApp() {
    pid=$(ps -ef | grep $1 | grep -v grep | awk '{print $2}')
    if [ -n "${pid}" ]; then
        echo "$pid"
    else
        echo 0
    fi
}

# 是否存在文件夹否则创建
function mkIfNotExistDir() {
    if [ $1 != "" ]; then
        if [ ! -d "$1" ]; then
            if [ "$2" == "print" ]; then
                msg "$1 is not exist,creating now."
            fi
            mkdir $1
        else
            if [ "$2" == "print" ]; then
                msg "$1 is already exist."
            fi
        fi
    fi
}

# 是否存在文件否则创建
function tcIfNotExistDir() {
    if [ $1 != "" ]; then
        if [ ! -f "$1" ]; then
            if [ "$2" == "print" ]; then
                msg "$1 is not exist,creating now."
            fi
            touch $1
        else
            if [ "$2" == "print" ]; then
                msg "$1 is already exist."
            fi
        fi
    fi
}


# 是否存在文件
function isExistFile(){
    if [ $1 != "" ]; then
        if [ -f "$1" ]; then
            echo 1
        else
            echo 0
        fi
    fi
}

# 输入判断用户确认
# $1 read tips
# $2 retry times default for 3
function readForTimes(){
    times=3
    if [ "$1" != "" ]; then
        if [ "$2" != "" ]; then
            let times=$2
        fi
        while [ $times -gt 0 ]; do
            read -p "$1" inputArg
            case $inputArg in
                [yY]*)
                let times=0
                ;;
                [nN]*)
                    exit
                ;;
                *)
                    if [ $times -eq 1 ]; then
                        msg "run out of retry, exit."
                        exit
                    else
                        let times--
                        msg "just enter y or n, please enter again, $times more times retry."
                    fi
                ;;
            esac
        done
    fi
}


# banner
function bannerColor() {
    case ${2} in
        black) color=0
        ;;
        red) color=1
        ;;
        green) color=2
        ;;
        yellow) color=3
        ;;
        blue) color=4
        ;;
        magenta) color=5
        ;;
        cyan) color=6
        ;;
        white) color=7
        ;;
        *) echo "color is not set"; exit 1
        ;;
    esac

    local msg="${3} ${1} ${3}"
    local edge
    edge=${msg//?/$3}
    tput setaf ${color}
    tput bold
    echo "${edge}"
    echo "${msg}"
    echo "${edge}"
    tput sgr 0
    echo
}